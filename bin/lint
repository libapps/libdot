#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright 2019 The Chromium OS Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

"""Lint our source files.

We'll run through eslint & closure-compiler.
"""

from __future__ import print_function

import fnmatch
import glob
import logging
import os
import sys

import libdot


# All checks except strictMissingRequire.
DEFAULT_CLOSURE_ARGS = (
    '--jscomp_error=*', '--jscomp_off=strictMissingRequire')


def kokoro_comments_path(path, tool):
    """Expand % markers that might exist in |path|."""
    if not path:
        return None
    else:
        return path.replace('%(tool)', tool)


def is_generated_path(path):
    """Return True if |path| is generated.

    Useful for filtering out comments for files not in the tree.
    """
    return (
        fnmatch.fnmatch(path, '*.concat.js') or
        fnmatch.fnmatch(path, '*.rollup.js')
    )


def _get_default_paths():
    """Get list of paths to lint by default."""
    # All files in js/*.js excluding generated files.
    # Use relpath for nicer default output.
    # Sort to ensure lib.js comes before lib_array.js, etc.
    # Filter out the generated libdot.js/libdot.min.js/etc...
    all_paths = (
        glob.glob(os.path.join(libdot.DIR, 'js', '*.js')) +
        glob.glob(os.path.join(libdot.DIR, 'third_party', '*', '*.js')))
    return sorted(
        os.path.relpath(x, os.getcwd())
        for x in all_paths
        if not os.path.basename(x).startswith('libdot.'))


def get_parser():
    """Get a command line parser."""
    parser = libdot.ArgumentParser(description=__doc__)
    parser.add_argument('--fix', action='store_true',
                        help='Run linters with --fix setting if possible.')
    parser.add_argument('--gerrit-comments-file',
                        help='Save errors for posting files to Gerrit.')
    parser.add_argument('paths', nargs='*',
                        help='Paths to lint.')
    parser.add_argument('--skip-mkdeps', dest='run_mkdeps',
                        action='store_false', default=True,
                        help='Skip (re)building of dependencies.')
    return parser


def main(argv, paths=(), mkdeps=None, closure_args=DEFAULT_CLOSURE_ARGS):
    """The common main func for all linters.

    Args:
      argv: The command line to process.
      paths: The default set of files to lint.  If the user doesn't specify
          any, we'll use these instead.
      mkdeps: Callback to build dependencies after we've initialized.
      closure_args: Extra arguments to pass to closure-compiler.
    """
    parser = get_parser()
    opts = parser.parse_args(argv)
    libdot.node_and_npm_setup()

    if not opts.paths:
        if paths:
            opts.paths = paths
        else:
            print('No files to lint.')
            return 0

    if mkdeps:
        if opts.run_mkdeps:
            mkdeps(opts)
        else:
            logging.info('Skipping building dependencies due to --skip-mkdeps')

    kwargs = {
        'paths': opts.paths,
        'fix': opts.fix,
        'gerrit_comments_file': opts.gerrit_comments_file,
    }
    checks = [
        libdot.eslint.perform(**kwargs),
        libdot.closure_compiler.perform(argv=closure_args, **kwargs),
    ]
    return 0 if all(checks) else 1


if __name__ == '__main__':
    sys.exit(main(sys.argv[1:], paths=_get_default_paths()))
